SQL> -- Daniel Delavega
SQL> -- Competency 2.3 Hands-On Assignment
SQL> 
SQL> 
SQL> -- 1 Querying Data in a Block
SQL> DECLARE
  2    lv_ship_date bb_basketstatus.dtstage%TYPE;
  3    lv_shipper_txt bb_basketstatus.shipper%TYPE;
  4    lv_ship_num bb_basketstatus.shippingnum%TYPE;
  5    lv_bask_num bb_basketstatus.idbasket%TYPE := 3;
  6  BEGIN
  7    SELECT dtstage, shipper, shippingnum
  8     INTO lv_ship_date, lv_shipper_txt, lv_ship_num
  9     FROM bb_basketstatus
 10     WHERE idbasket = lv_bask_num
 11      AND idstage = 5;
 12    DBMS_OUTPUT.PUT_LINE('Date Shipped: '||lv_ship_date);
 13    DBMS_OUTPUT.PUT_LINE('Shipper: '||lv_shipper_txt);
 14    DBMS_OUTPUT.PUT_LINE('Shipping #: '||lv_ship_num);
 15  END;
 16  /
Date Shipped: 25/01/12
Shipper: UPS
Shipping #: ZW845584GD89H569


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 1.6 block with basketID that doesn't exist.
SQL> DECLARE
  2    lv_ship_date bb_basketstatus.dtstage%TYPE;
  3    lv_shipper_txt bb_basketstatus.shipper%TYPE;
  4    lv_ship_num bb_basketstatus.shippingnum%TYPE;
  5    lv_bask_num bb_basketstatus.idbasket%TYPE := 7;
  6  BEGIN
  7    SELECT dtstage, shipper, shippingnum
  8     INTO lv_ship_date, lv_shipper_txt, lv_ship_num
  9     FROM bb_basketstatus
 10     WHERE idbasket = lv_bask_num
 11      AND idstage = 5;
 12    DBMS_OUTPUT.PUT_LINE('Date Shipped: '||lv_ship_date);
 13    DBMS_OUTPUT.PUT_LINE('Shipper: '||lv_shipper_txt);
 14    DBMS_OUTPUT.PUT_LINE('Shipping #: '||lv_ship_num);
 15  END;
 16  /

Error starting at line : 27 in command -
DECLARE
  lv_ship_date bb_basketstatus.dtstage%TYPE;
  lv_shipper_txt bb_basketstatus.shipper%TYPE;
  lv_ship_num bb_basketstatus.shippingnum%TYPE;
  lv_bask_num bb_basketstatus.idbasket%TYPE := 7;
BEGIN
  SELECT dtstage, shipper, shippingnum
   INTO lv_ship_date, lv_shipper_txt, lv_ship_num
   FROM bb_basketstatus
   WHERE idbasket = lv_bask_num
    AND idstage = 5;
  DBMS_OUTPUT.PUT_LINE('Date Shipped: '||lv_ship_date);
  DBMS_OUTPUT.PUT_LINE('Shipper: '||lv_shipper_txt);
  DBMS_OUTPUT.PUT_LINE('Shipping #: '||lv_ship_num);
END;
Error report -
ORA-01403: no data found
ORA-06512: at line 7
01403. 00000 -  "no data found"
*Cause:    No data was found from the objects.
*Action:   There was no data from the objects which may be due to end of fetch.

More Details :
https://docs.oracle.com/error-help/db/ora-01403/
https://docs.oracle.com/error-help/db/ora-06512/
SQL> 
SQL> 
SQL> -- 2: Using a Record Variable
SQL> DECLARE
  2    rec_ship bb_basketstatus%ROWTYPE;
  3    lv_bask_num bb_basketstatus.idbasket%TYPE := 3;
  4  BEGIN
  5    SELECT *
  6     INTO rec_ship
  7     FROM bb_basketstatus
  8     WHERE idbasket =  lv_bask_num
  9      AND idstage = 5;
 10    DBMS_OUTPUT.PUT_LINE('Date Shipped: '||rec_ship.dtstage);
 11    DBMS_OUTPUT.PUT_LINE('Shipper: '||rec_ship.shipper);
 12    DBMS_OUTPUT.PUT_LINE('Shipping #: '||rec_ship.shippingnum);
 13    DBMS_OUTPUT.PUT_LINE('Notes: '||rec_ship.notes);
 14  END;
 15  /
Date Shipped: 25/01/12
Shipper: UPS
Shipping #: ZW845584GD89H569
Notes: Customer called to confirm shipment


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 3: Processing Databse Data with IF Statements
SQL> DECLARE
  2   lv_total_num NUMBER(6,2);
  3   lv_rating_txt VARCHAR2(4);
  4   lv_shop_num bb_basket.idshopper%TYPE := 22;
  5  BEGIN
  6   SELECT SUM(total)
  7    INTO lv_total_num
  8    FROM bb_basket
  9    WHERE idShopper = lv_shop_num
 10      AND orderplaced = 1
 11    GROUP BY idshopper;
 12    IF lv_total_num > 200 THEN
 13      lv_rating_txt := 'HIGH';
 14    ELSIF lv_total_num > 100 THEN
 15      lv_rating_txt := 'MID';
 16    ELSE
 17      lv_rating_txt := 'LOW';
 18    END IF; 
 19     DBMS_OUTPUT.PUT_LINE('Shopper '||lv_shop_num||' is rated '||lv_rating_txt);
 20  END;
 21  /
Shopper 22 is rated HIGH


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 4: Using Searched CASE statements
SQL> DECLARE
  2   lv_total_num NUMBER(6,2);
  3   lv_rating_txt VARCHAR2(4);
  4   lv_shop_num bb_basket.idshopper%TYPE := 22;
  5  BEGIN
  6   SELECT SUM(total)
  7    INTO lv_total_num
  8    FROM bb_basket
  9    WHERE idShopper = lv_shop_num
 10      AND orderplaced = 1
 11    GROUP BY idshopper;
 12    CASE
 13      WHEN lv_total_num > 200 THEN
 14        lv_rating_txt := 'HIGH';
 15      WHEN lv_total_num > 100 THEN
 16        lv_rating_txt := 'MID';
 17      WHEN lv_total_num <= 100 THEN
 18        lv_rating_txt := 'LOW';
 19    END CASE; 
 20     DBMS_OUTPUT.PUT_LINE('Shopper '||lv_shop_num||' is rated '||lv_rating_txt);
 21  END;
 22  /
Shopper 22 is rated HIGH


PL/SQL procedure successfully completed.

SQL> 
SQL> -- 5 Using a WHILE loop
SQL> DECLARE
  2    lv_item bb_product.idproduct%TYPE := 5;
  3    lv_avail NUMBER(5) := 500;
  4    lv_quantity NUMBER(5) := 0;
  5    lv_item_price bb_product.price%TYPE;
  6  BEGIN
  7    SELECT price
  8    INTO lv_item_price
  9    FROM bb_product
 10    WHERE idproduct = lv_item;
 11    WHILE lv_avail >= lv_item_price LOOP
 12      lv_quantity := lv_quantity + 1;
 13      lv_avail := lv_avail - lv_item_price;
 14    END LOOP;
 15    DBMS_OUTPUT.PUT_LINE(lv_quantity||' of idproduct '||lv_item||' can be purchased');
 16  END;
 17  /
49 of idproduct 5 can be purchased


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 6: Working with IF statements
SQL> DECLARE
  2    lv_basket_num bb_basket.idbasket%TYPE := 5;
  3    lv_quantity bb_basket.quantity%TYPE;
  4    lv_ship_cost NUMBER(6,2);
  5  BEGIN
  6    SELECT quantity
  7    INTO lv_quantity
  8    FROM bb_basket
  9    WHERE idbasket = lv_basket_num;
 10  
 11    CASE
 12      WHEN lv_quantity <= 3 THEN lv_ship_cost := 5.00;
 13      WHEN lv_quantity <= 6 THEN lv_ship_cost := 7.50;
 14      WHEN lv_quantity <= 10 THEN lv_ship_cost := 10.00;
 15      WHEN lv_quantity > 10 THEN lv_ship_cost := 12.00;
 16    END CASE;
 17  
 18    DBMS_OUTPUT.PUT_LINE('When idbasket = '||lv_basket_num||' shipping cost = $'||lv_ship_cost);
 19  
 20    lv_basket_num := 12;
 21    SELECT quantity
 22    INTO lv_quantity
 23    FROM bb_basket
 24    WHERE idbasket = lv_basket_num;
 25  
 26    CASE
 27      WHEN lv_quantity <= 3 THEN lv_ship_cost := 5.00;
 28      WHEN lv_quantity <= 6 THEN lv_ship_cost := 7.50;
 29      WHEN lv_quantity <= 10 THEN lv_ship_cost := 10.00;
 30      WHEN lv_quantity > 10 THEN lv_ship_cost := 12.00;
 31    END CASE;
 32    DBMS_OUTPUT.PUT_LINE('When idbasket = '||lv_basket_num||' shipping cost = $'||lv_ship_cost);
 33  END;
 34  /
When idbasket = 5 shipping cost = $7.5
When idbasket = 12 shipping cost = $10


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 7: USING Scalar Variables for Data Retrieval
SQL> DECLARE
  2    lv_subtotal bb_basket.subtotal%TYPE;
  3    lv_shipping bb_basket.shipping%TYPE;
  4    lv_tax bb_basket.tax%TYPE;
  5    lv_total bb_basket.total%TYPE;
  6    lv_basket_num bb_basket.idbasket%TYPE := 12;
  7  BEGIN
  8    SELECT subtotal,shipping,tax,total
  9    INTO lv_subtotal,lv_shipping,lv_tax,lv_total
 10    FROM bb_basket
 11    WHERE idbasket = lv_basket_num;
 12  DBMS_OUTPUT.PUT_LINE('subtotal: '||lv_subtotal||'
 13  shipping: '||lv_shipping||'
 14  tax: '||lv_tax||'
 15  total: '||lv_total);
 16  END;
 17  /
subtotal: 72.4
shipping: 8
tax: 3.26
total: 83.66


PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- 8: Using a Record Variable for Data Retrieval
SQL> DECLARE
  2    rv_bb_basket bb_basket%ROWTYPE;
  3    lv_basket_num bb_basket.idbasket%TYPE := 12;
  4  BEGIN
  5    SELECT *
  6    INTO rv_bb_basket
  7    FROM bb_basket
  8    WHERE idbasket = lv_basket_num;
  9  DBMS_OUTPUT.PUT_LINE('subtotal: '||rv_bb_basket.subtotal||'
 10  shipping: '||rv_bb_basket.shipping||'
 11  tax: '||rv_bb_basket.tax||'
 12  total: '||rv_bb_basket.total);
 13  END;
 14  /
subtotal: 72.4
shipping: 8
tax: 3.26
total: 83.66


PL/SQL procedure successfully completed.

SQL> SPOOL /home/daniel/Documents/Programming/PLSQL/Handout3.txt;
